To create a text file: sc.textFile("<filename>")
To get the count of lines in file: <rdd>.count()
To get the first line of the file: <rdd>.first()
To filter a word: <rdd>.filter(x =>x.contains("<filtered_word>")
To initalize spark context: val conf = new SparkConf().setMaster("local").setAppName("My App"); val sc= new SparkContext(conf);
To exit the application: sc.stop
To save a file: <rdd>.saveAsTextFile("<filename>")
To split the based on content:<rdd>.flatMap(x => x.split("<regex>"))
To transform into key value :<rdd>.map(x ==> (x,1))
To create an RDD from collection: sc.parallelize(list("hello","how are you"))
To perform union operation: <rdd1>.union(<rdd2>) 
To return only a set of records: <rdd>.take(<no of lines>)
To convert to string datatype: <rdd>.collect().mkString(",")
To get unique values: <rdd>.distinct
To get common values: <rdd1>.intersection(<rdd2>)
To get subtracted values: <rdd1>.subtract(<rdd2>
To return elements with limits: <rdd>.flatMap(x => x.to(<end number>))
To reduce an RDD: <rdd>.reduce((x,y), x+y))
To get all data: <rdd>.collect
To get the number of times each element occured in RDD: <rdd>.countByValue. Returns {(value, count), (value,count)...}
To get the top elements: <rdd>.top(no of elements)
To get the number of elements in ordered way: <rdd>.takeOrdered(num of elements)(<my orderding>)
To return sample elements: <rdd>.takeSample(false,1) 
To iterate the RDD: <rdd>.forEach(func)
To persist/unpersist data: <rdd>.persist(StorageLevel.DISK_ONLY) ; <rdd>.unpersist
To get the first line as key: <rdd>.map(x => x.split(" ")(0), x)
To combine values with same key in pair rdd: <rdd>.reduceByKey((x,y) => x+y)
To group by key in pair rdd: <rdd>.groupByKey
To change the values in pair rdd: <rdd>.mapValues(x => x +1)
To change the multiple values in pair rdd: <rdd>.flatMapValues(x => (x to 5))
To return the keys in pair rdd: <rdd>.keys
To retrun the values in pair RDD: <rdd>.values
To sort the values based on key in pair RDD: <pair rdd>.sortByKey
To remove the elements in pair rdd2: <pair rdd1>.subtractByKey(<pair rdd2>) //similar to subtract
To perform inner join between 2 pair rdds: <pair rdd1>.join<pair rdd2> //similar to intersection
To perform right outer join: ???
To perform left outer join: ???
To group together - cogroup: ??
To filter pair rdd based on values length: <pair rdd>.filter(case (key, value) => value.length < <number>)



